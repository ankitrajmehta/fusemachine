name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
      MONGO_INITDB_ROOT_USERNAME: ${{ secrets.MONGO_INITDB_ROOT_USERNAME }}
      MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}
      MONGODB_CONNECTION_STRING: ${{ secrets.MONGODB_CONNECTION_STRING }}
    services:
      mongo:
        image: mongo:8.0.9
        ports:
          - 27017:27017
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create mongodb .env file
        run: |
          mkdir -p mongodb
          echo "MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}" > mongodb/.env
          echo "MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}" >> mongodb/.env

      - name: Create chat_app_backend .env file
        run: |
          mkdir -p chat_app_backend
          echo "MONGODB_CONNECTION_STRING=${MONGODB_CONNECTION_STRING}" > chat_app_backend/.env
          echo "GROQ_API_KEY=${GROQ_API_KEY}" >> chat_app_backend/.env

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Build Docker containers
        run: docker compose build

      - name: Start Docker containers
        run: docker compose up -d

      - name: Install backend dependencies
        run: |
          pip install -r chat_app_backend/requirements.txt

      - name: Run backend tests
        run: |
          pytest tests/

      - name: Stop Docker containers
        if: always()
        run: docker compose down -v
